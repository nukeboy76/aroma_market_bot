from __future__ import annotations

from aiogram import Router, types
from aiogram.filters import Command
from sqlalchemy import select

from app.models.order import Order
from app.models.product import Product
from app.services.loyalty_service import LoyaltyService
from app.services.order_service import OrderService

router = Router(name="order")

# –ü–∞–º—è—Ç–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ (MVP)
CART: dict[int, dict[int, int]] = {}      # telegram_id -> {product_id: qty}
USE_BONUS: dict[int, bool] = {}           # telegram_id -> True/False


# ---------- –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ ----------------------------------------- #


@router.callback_query(lambda c: c.data.startswith("add:"))
async def add_to_cart(query: types.CallbackQuery) -> None:
    product_id = int(query.data.split(":", 1)[1])
    cart = CART.setdefault(query.from_user.id, {})
    cart[product_id] = cart.get(product_id, 0) + 1
    await query.answer("–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω!")


# ---------- –ø—Ä–æ—Å–º–æ—Ç—Ä –∫–æ—Ä–∑–∏–Ω—ã ------------------------------------------ #


async def _cart_keyboard() -> types.InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫–æ—Ä–∑–∏–Ω—ã —Å –≤—ã–±–æ—Ä–æ–º –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞–¥ –±–æ–Ω—É—Å–∞–º–∏ –∏ –æ—á–∏—Å—Ç–∫–æ–π."""
    return types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(
                    text="–°–ø–∏—Å–∞—Ç—å –±–æ–Ω—É—Å—ã", callback_data="checkout:use"
                ),
                types.InlineKeyboardButton(
                    text="–ù–∞–∫–æ–ø–∏—Ç—å –±–æ–Ω—É—Å—ã", callback_data="checkout:save"
                ),
            ],
            [
                types.InlineKeyboardButton(
                    text="üóë –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="cart:clear"
                )
            ],
        ]
    )


@router.message(Command("order"))
@router.message(lambda m: m.text == "–ö–æ—Ä–∑–∏–Ω–∞")
async def show_cart(message: types.Message, session) -> None:
    await _render_cart(message, session, edit=False)


# ---------- ¬´–æ—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É¬ª ---------------------------------------- #


@router.callback_query(lambda c: c.data == "cart:clear")
async def clear_cart(query: types.CallbackQuery) -> None:
    CART.pop(query.from_user.id, None)
    USE_BONUS.pop(query.from_user.id, None)
    await query.message.edit_text("–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞.")
    await query.answer("–ì–æ—Ç–æ–≤–æ!")


# ---------- –≤—ã–±–æ—Ä —Å–ø–∏—Å–∞—Ç—å / –Ω–∞–∫–æ–ø–∏—Ç—å ---------------------------------- #


@router.callback_query(lambda c: c.data.startswith("checkout:"))
async def checkout(query: types.CallbackQuery, session) -> None:
    USE_BONUS[query.from_user.id] = query.data.endswith("use")
    await query.answer()
    await confirm_order(query.message, session, query.from_user.id)


# ---------- –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ ----------------------------------------- #


async def confirm_order(message: types.Message, session, tg_id: int | None = None):
    user_tg_id = tg_id or message.from_user.id
    cart = CART.get(user_tg_id)
    if not cart:
        await message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
        return

    loyalty_svc = LoyaltyService(session)
    user = await loyalty_svc.get_or_create(
        telegram_id=user_tg_id, first_name=message.from_user.first_name
    )
    order_svc = OrderService(session)
    order = await order_svc.create(user_id=user.id, items=cart)

    total_rub = order.total_price // 100
    use_bonus = USE_BONUS.get(user_tg_id, False)

    if use_bonus and user.loyalty_points:
        used = await loyalty_svc.redeem_points(user, total_rub)
        remaining = total_rub - used
        bonus_add = remaining // 10
        await loyalty_svc.add_points(user, bonus_add)

        reply = (
            f"–ë–æ–Ω—É—Å—ã —Å–ø–∏—Å–∞–Ω—ã: {used}\n"
            f"–ö –æ–ø–ª–∞—Ç–µ –æ—Å—Ç–∞–ª–æ—Å—å: {remaining} ‚ÇΩ\n"
            f"–ù–∞—á–∏—Å–ª–µ–Ω–æ –Ω–æ–≤—ã—Ö –±–æ–Ω—É—Å–æ–≤: {bonus_add}"
        )
        need_payment = remaining > 0
    else:
        bonus_add = total_rub // 10
        await loyalty_svc.add_points(user, bonus_add)
        reply = f"–ë—É–¥–µ—Ç –Ω–∞—á–∏—Å–ª–µ–Ω–æ <b>{bonus_add}</b> –±–æ–Ω—É—Å–æ–≤."
        need_payment = total_rub > 0

    # –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    CART.pop(user_tg_id, None)
    USE_BONUS.pop(user_tg_id, None)

    kb = (
        types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(
                        text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", callback_data=f"pay:{order.id}"
                    )
                ]
            ]
        )
        if need_payment
        else None
    )

    # —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –±–æ—Ç-—Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –º–æ–∂–Ω–æ
    if message.from_user.is_bot:
        await message.edit_text(reply, reply_markup=kb, parse_mode="HTML")
    else:
        await message.answer(reply, reply_markup=kb, parse_mode="HTML")


# ---------- ¬´–æ–ø–ª–∞—Ç–∏—Ç—å¬ª ------------------------------------------------- #


@router.callback_query(lambda c: c.data.startswith("pay:"))
async def pay_order(query: types.CallbackQuery, session) -> None:
    order_id = int(query.data.split(":", 1)[1])
    await session.execute(
        Order.__table__.update().where(Order.id == order_id).values(status="paid")
    )
    await session.commit()
    await query.answer("–ó–∞–∫–∞–∑ –æ–ø–ª–∞—á–µ–Ω. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!", show_alert=True)


# ---------- helpers ---------------------------------------------------- #


async def _render_cart(message: types.Message, session, *, edit: bool) -> None:
    """–í—ã–≤–µ—Å—Ç–∏/–æ–±–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –∫–æ—Ä–∑–∏–Ω—ã (edit=True ‚Äì —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å)."""
    cart = CART.get(message.from_user.id)
    if not cart:
        text = "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞."
        if edit and message.from_user.is_bot:
            await message.edit_text(text)
        else:
            await message.answer(text)
        return

    product_ids = list(cart.keys())
    result = await session.execute(
        select(Product.id, Product.name).where(Product.id.in_(product_ids))
    )
    names = {row.id: row.name for row in result.all()}

    lines = [
        f"‚Ä¢ <b>{names.get(pid, '???')}</b>: {qty} —à—Ç."
        for pid, qty in cart.items()
    ]

    loyalty_svc = LoyaltyService(session)
    user = await loyalty_svc.get_or_create(
        telegram_id=message.from_user.id,
        first_name=message.from_user.first_name,
    )

    text = (
        "–í–∞—à –∑–∞–∫–∞–∑:\n"
        + "\n".join(lines)
        + f"\n\n<b>–î–æ—Å—Ç—É–ø–Ω–æ –±–æ–Ω—É—Å–æ–≤:</b> {user.loyalty_points}"
        "\n–ö–∞–∫ –ø–æ—Å—Ç—É–ø–∏—Ç—å —Å –±–æ–Ω—É—Å–∞–º–∏?"
    )

    if edit and message.from_user.is_bot:
        await message.edit_text(text, reply_markup=await _cart_keyboard(), parse_mode="HTML")
    else:
        await message.answer(text, reply_markup=await _cart_keyboard(), parse_mode="HTML")
